/* 0 */

/* 1 */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 7 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 8 */

/* 9 */

/* WEBPACK VAR INJECTION */

/* harmony default export */

/************************************************************************/

/******/

/***/

//

//       routes = `${routes}/${slugify(item.name)}`;

//       this.addCatalogNames(item.content, routes)

//       this.catalogNames[item.name] = `/catalog${routes}/${slugify(item.name)}`;

//       this.catalogNames[item.name] = `/catalog${routes}`;

//     if (item.subitems) {

//     let routes = addedRoutes;

//     }

//     } else {

//   !!on ? $(() => $('[data-toggle="tooltip"]').tooltip()) : $(() => $('[data-toggle="tooltip"]').tooltip('dispose'));

//   for (const item of data) {

//   }

// ??? unused

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Flag the module as loaded

// Form work!!

// MVC model

// Object.prototype.hasOwnProperty.call

// Promise = chunk loading, 0 = chunk loaded

// Return the exports of the module

// The module cache

// The require function

// __webpack_public_path__

// add entry module to deferred list

// add entry modules from loaded chunk to deferred list

// addCatalogBreadcrum(data) {

// api: 'https://my-json-server.typicode.com/SergeySalimov/FE2-project',

// basket listener !!!! here change to fast access to basket

// broadcast block

// compile with handlebars

// console.dir(this.catalogNames);

// console.dir(this.catalogRoutes);

// const temp = url.split('/')[1];

// create a fake namespace object

// define __esModule on exports

// define getter function for harmony exports

// display routes functions

// error branch

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// for touchscreen

// getDefaultExport function for compatibility with non-harmony modules

// import 'bootstrap/dist/css/bootstrap.min.css';

// import JS

// initTooltip(on = true) {

// initialization block

// install a JSONP callback for chunk loading

// loaded from server

// login errors 0 => error1 & 1 => error2 only

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// object to store loaded and loading chunks

// output block

// perehod v avtorizovanoe sostoyanie

// registration errors 0 => error1 & 1 => error2 only

// rendering templates

// rerender Products

// run deferred modules when all chunks ready

// run deferred modules when ready

// sending routes to DB

// success branch

// this data is loaded now from server !!!!!

// this._model.initTooltip();

// this._model.initTooltip(false);

// this._model.initTooltip(this._model._noAuth);

// this._model.on('productsLoaded', () => this.initCatalogRoutes())

// this.catalogNames = {};

// this.catalogRoutes = {};

// this.getDataCatalogNamesFromServer();

// this.getDataCatalogRoutesFromServer();

// this.sendDataToServer('catalogNames', this.catalogNames);

// this.sendDataToServer('catalogRoutes', this.catalogRoutes);

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// user logged

// webpackBootstrap

// }

//ToDO Разбить на функции, слишком сложно

//ToDO Сделать обработку на event 'prdClk'

//broadcast block

//succes login

//succes registration
